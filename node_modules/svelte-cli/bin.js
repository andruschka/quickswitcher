#!/usr/bin/env node
'use strict';

var svelte = require('svelte');
var path = require('path');
var fs = require('fs');

var index$1 = function (args, opts) {
    if (!opts) opts = {};
    
    var flags = { bools : {}, strings : {}, unknownFn: null };

    if (typeof opts['unknown'] === 'function') {
        flags.unknownFn = opts['unknown'];
    }

    if (typeof opts['boolean'] === 'boolean' && opts['boolean']) {
      flags.allBools = true;
    } else {
      [].concat(opts['boolean']).filter(Boolean).forEach(function (key) {
          flags.bools[key] = true;
      });
    }
    
    var aliases = {};
    Object.keys(opts.alias || {}).forEach(function (key) {
        aliases[key] = [].concat(opts.alias[key]);
        aliases[key].forEach(function (x) {
            aliases[x] = [key].concat(aliases[key].filter(function (y) {
                return x !== y;
            }));
        });
    });

    [].concat(opts.string).filter(Boolean).forEach(function (key) {
        flags.strings[key] = true;
        if (aliases[key]) {
            flags.strings[aliases[key]] = true;
        }
     });

    var defaults = opts['default'] || {};
    
    var argv = { _ : [] };
    Object.keys(flags.bools).forEach(function (key) {
        setArg(key, defaults[key] === undefined ? false : defaults[key]);
    });
    
    var notFlags = [];

    if (args.indexOf('--') !== -1) {
        notFlags = args.slice(args.indexOf('--')+1);
        args = args.slice(0, args.indexOf('--'));
    }

    function argDefined(key, arg) {
        return (flags.allBools && /^--[^=]+$/.test(arg)) ||
            flags.strings[key] || flags.bools[key] || aliases[key];
    }

    function setArg (key, val, arg) {
        if (arg && flags.unknownFn && !argDefined(key, arg)) {
            if (flags.unknownFn(arg) === false) return;
        }

        var value = !flags.strings[key] && isNumber(val)
            ? Number(val) : val;
        setKey(argv, key.split('.'), value);
        
        (aliases[key] || []).forEach(function (x) {
            setKey(argv, x.split('.'), value);
        });
    }

    function setKey (obj, keys, value) {
        var o = obj;
        keys.slice(0,-1).forEach(function (key) {
            if (o[key] === undefined) o[key] = {};
            o = o[key];
        });

        var key = keys[keys.length - 1];
        if (o[key] === undefined || flags.bools[key] || typeof o[key] === 'boolean') {
            o[key] = value;
        }
        else if (Array.isArray(o[key])) {
            o[key].push(value);
        }
        else {
            o[key] = [ o[key], value ];
        }
    }
    
    function aliasIsBoolean(key) {
      return aliases[key].some(function (x) {
          return flags.bools[x];
      });
    }

    for (var i = 0; i < args.length; i++) {
        var arg = args[i];
        
        if (/^--.+=/.test(arg)) {
            // Using [\s\S] instead of . because js doesn't support the
            // 'dotall' regex modifier. See:
            // http://stackoverflow.com/a/1068308/13216
            var m = arg.match(/^--([^=]+)=([\s\S]*)$/);
            var key = m[1];
            var value = m[2];
            if (flags.bools[key]) {
                value = value !== 'false';
            }
            setArg(key, value, arg);
        }
        else if (/^--no-.+/.test(arg)) {
            var key = arg.match(/^--no-(.+)/)[1];
            setArg(key, false, arg);
        }
        else if (/^--.+/.test(arg)) {
            var key = arg.match(/^--(.+)/)[1];
            var next = args[i + 1];
            if (next !== undefined && !/^-/.test(next)
            && !flags.bools[key]
            && !flags.allBools
            && (aliases[key] ? !aliasIsBoolean(key) : true)) {
                setArg(key, next, arg);
                i++;
            }
            else if (/^(true|false)$/.test(next)) {
                setArg(key, next === 'true', arg);
                i++;
            }
            else {
                setArg(key, flags.strings[key] ? '' : true, arg);
            }
        }
        else if (/^-[^-]+/.test(arg)) {
            var letters = arg.slice(1,-1).split('');
            
            var broken = false;
            for (var j = 0; j < letters.length; j++) {
                var next = arg.slice(j+2);
                
                if (next === '-') {
                    setArg(letters[j], next, arg);
                    continue;
                }
                
                if (/[A-Za-z]/.test(letters[j]) && /=/.test(next)) {
                    setArg(letters[j], next.split('=')[1], arg);
                    broken = true;
                    break;
                }
                
                if (/[A-Za-z]/.test(letters[j])
                && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
                    setArg(letters[j], next, arg);
                    broken = true;
                    break;
                }
                
                if (letters[j+1] && letters[j+1].match(/\W/)) {
                    setArg(letters[j], arg.slice(j+2), arg);
                    broken = true;
                    break;
                }
                else {
                    setArg(letters[j], flags.strings[letters[j]] ? '' : true, arg);
                }
            }
            
            var key = arg.slice(-1)[0];
            if (!broken && key !== '-') {
                if (args[i+1] && !/^(-|--)[^-]/.test(args[i+1])
                && !flags.bools[key]
                && (aliases[key] ? !aliasIsBoolean(key) : true)) {
                    setArg(key, args[i+1], arg);
                    i++;
                }
                else if (args[i+1] && /true|false/.test(args[i+1])) {
                    setArg(key, args[i+1] === 'true', arg);
                    i++;
                }
                else {
                    setArg(key, flags.strings[key] ? '' : true, arg);
                }
            }
        }
        else {
            if (!flags.unknownFn || flags.unknownFn(arg) !== false) {
                argv._.push(
                    flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)
                );
            }
            if (opts.stopEarly) {
                argv._.push.apply(argv._, args.slice(i + 1));
                break;
            }
        }
    }
    
    Object.keys(defaults).forEach(function (key) {
        if (!hasKey(argv, key.split('.'))) {
            setKey(argv, key.split('.'), defaults[key]);
            
            (aliases[key] || []).forEach(function (x) {
                setKey(argv, x.split('.'), defaults[key]);
            });
        }
    });
    
    if (opts['--']) {
        argv['--'] = new Array();
        notFlags.forEach(function(key) {
            argv['--'].push(key);
        });
    }
    else {
        notFlags.forEach(function(key) {
            argv._.push(key);
        });
    }

    return argv;
};

function hasKey (obj, keys) {
    var o = obj;
    keys.slice(0,-1).forEach(function (key) {
        o = (o[key] || {});
    });

    var key = keys[keys.length - 1];
    return key in o;
}

function isNumber (x) {
    if (typeof x === 'number') return true;
    if (/^0x[0-9a-f]+$/i.test(x)) return true;
    return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
}

var help = "svelte-cli version __VERSION__\n=====================================\n\nUsage: svelte compile [options] <entry file>\n\nBasic options:\n\n-v, --version            Show version number\n-h, --help               Show this help message\n-i, --input              Input (alternative to <entry file>)\n-o, --output <output>    Output (if absent, prints to stdout)\n-f, --format [es]        Type of output (amd, cjs, es, iife, umd)\n-g, --globals            Comma-separate list of `module ID:Global` pairs\n-n, --name               Name for IIFE/UMD export\n-m, --sourcemap          Generate sourcemap (`-m inline` for inline map)\n-d, --dev                Add dev mode warnings and errors\n--amdId                  ID for AMD module (default is anonymous)\n--no-css                 Don't include CSS (useful with SSR)\n\nExamples:\n\n# generate a JavaScript module from MyComponent.html\nsvelte compile MyComponent.html > MyComponent.js\nsvelte compile -i MyComponent.html -o MyComponent.js\n\n# generate a UMD module from MyComponent.html, inferring\n# name from the filename ('MyComponent')\nsvelte compile -f umd MyComponent.html > MyComponent.js\n\n# generate a UMD module, specifying the name\nsvelte compile -f umd -n CustomName MyComponent.html > MyComponent.js\n\n# compile all .html files in components/\nsvelte compile -i src/components -o build/components\n\nNotes:\n\n* When piping to stdout, only inline sourcemaps are permitted\n* When compiling a folder of components, names will always be\n  inferred from filenames, and AMD modules will be anonymous\n\nFor more information visit https://github.com/sveltejs/svelte-cli\n";

var version = "1.3.6";

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

var index$4 = function (str) {
	if (typeof str !== 'string') {
		throw new TypeError('Expected a string');
	}

	return str.replace(matchOperatorsRe, '\\$&');
};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var index$6 = createCommonjsModule(function (module) {
'use strict';

function assembleStyles () {
	var styles = {
		modifiers: {
			reset: [0, 0],
			bold: [1, 22], // 21 isn't widely supported and 22 does the same thing
			dim: [2, 22],
			italic: [3, 23],
			underline: [4, 24],
			inverse: [7, 27],
			hidden: [8, 28],
			strikethrough: [9, 29]
		},
		colors: {
			black: [30, 39],
			red: [31, 39],
			green: [32, 39],
			yellow: [33, 39],
			blue: [34, 39],
			magenta: [35, 39],
			cyan: [36, 39],
			white: [37, 39],
			gray: [90, 39]
		},
		bgColors: {
			bgBlack: [40, 49],
			bgRed: [41, 49],
			bgGreen: [42, 49],
			bgYellow: [43, 49],
			bgBlue: [44, 49],
			bgMagenta: [45, 49],
			bgCyan: [46, 49],
			bgWhite: [47, 49]
		}
	};

	// fix humans
	styles.colors.grey = styles.colors.gray;

	Object.keys(styles).forEach(function (groupName) {
		var group = styles[groupName];

		Object.keys(group).forEach(function (styleName) {
			var style = group[styleName];

			styles[styleName] = group[styleName] = {
				open: '\u001b[' + style[0] + 'm',
				close: '\u001b[' + style[1] + 'm'
			};
		});

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false
		});
	});

	return styles;
}

Object.defineProperty(module, 'exports', {
	enumerable: true,
	get: assembleStyles
});
});

var index$10 = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};

var ansiRegex = index$10();

var index$8 = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};

var re = new RegExp(index$10().source); // remove the `g` flag
var index$12 = re.test.bind(re);

var argv = process.argv;

var terminator = argv.indexOf('--');
var hasFlag = function (flag) {
	flag = '--' + flag;
	var pos = argv.indexOf(flag);
	return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
};

var index$14 = (function () {
	if ('FORCE_COLOR' in process.env) {
		return true;
	}

	if (hasFlag('no-color') ||
		hasFlag('no-colors') ||
		hasFlag('color=false')) {
		return false;
	}

	if (hasFlag('color') ||
		hasFlag('colors') ||
		hasFlag('color=true') ||
		hasFlag('color=always')) {
		return true;
	}

	if (process.stdout && !process.stdout.isTTY) {
		return false;
	}

	if (process.platform === 'win32') {
		return true;
	}

	if ('COLORTERM' in process.env) {
		return true;
	}

	if (process.env.TERM === 'dumb') {
		return false;
	}

	if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
		return true;
	}

	return false;
})();

var defineProps = Object.defineProperties;
var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);

function Chalk(options) {
	// detect mode if not set manually
	this.enabled = !options || options.enabled === undefined ? index$14 : options.enabled;
}

// use bright blue on Windows as the normal blue color is illegible
if (isSimpleWindowsTerm) {
	index$6.blue.open = '\u001b[94m';
}

var styles = (function () {
	var ret = {};

	Object.keys(index$6).forEach(function (key) {
		index$6[key].closeRe = new RegExp(index$4(index$6[key].close), 'g');

		ret[key] = {
			get: function () {
				return build.call(this, this._styles.concat(key));
			}
		};
	});

	return ret;
})();

var proto = defineProps(function chalk() {}, styles);

function build(_styles) {
	var builder = function () {
		return applyStyle.apply(builder, arguments);
	};

	builder._styles = _styles;
	builder.enabled = this.enabled;
	// __proto__ is used because we must return a function, but there is
	// no way to create a function with a different prototype.
	/* eslint-disable no-proto */
	builder.__proto__ = proto;

	return builder;
}

function applyStyle() {
	// support varags, but simply cast to string in case there's only one arg
	var args = arguments;
	var argsLen = args.length;
	var str = argsLen !== 0 && String(arguments[0]);

	if (argsLen > 1) {
		// don't slice `arguments`, it prevents v8 optimizations
		for (var a = 1; a < argsLen; a++) {
			str += ' ' + args[a];
		}
	}

	if (!this.enabled || !str) {
		return str;
	}

	var nestedStyles = this._styles;
	var i = nestedStyles.length;

	// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
	// see https://github.com/chalk/chalk/issues/58
	// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
	var originalDim = index$6.dim.open;
	if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
		index$6.dim.open = '';
	}

	while (i--) {
		var code = index$6[nestedStyles[i]];

		// Replace any instances already present with a re-opening code
		// otherwise only the part of the string until said closing code
		// will be colored, and the rest will simply be 'plain'.
		str = code.open + str.replace(code.closeRe, code.open) + code.close;
	}

	// Reset the original 'dim' if we changed it to work around the Windows dimmed gray issue.
	index$6.dim.open = originalDim;

	return str;
}

function init() {
	var ret = {};

	Object.keys(styles).forEach(function (name) {
		ret[name] = {
			get: function () {
				return build.call(this, [name]);
			}
		};
	});

	return ret;
}

defineProps(Chalk.prototype, init());

var index$2 = new Chalk();
var styles_1 = index$6;
var hasColor = index$12;
var stripColor = index$8;
var supportsColor_1 = index$14;

var index_1 = index$2.red;
var index_2 = index$2.cyan;
var index_3 = index$2.grey;
index$2.styles = styles_1;
index$2.hasColor = hasColor;
index$2.stripColor = stripColor;
index$2.supportsColor = supportsColor_1;

function stderr ( msg ) {
	console.error( msg ); // eslint-disable-line no-console
}

const handlers = {
	MISSING_DIR_OUTPUT_OPTION: () => {
		stderr( index_1( 'You must specify an --output (-o) option when compiling a directory of files' ) );
	}
};

function handleError ( err, recover ) {
	const handler = handlers[ err && err.code ];

	if ( handler ) {
		handler( err );
	} else {
		stderr( index_1( err.message || err ) );

		if ( err.stack ) {
			stderr( index_3( err.stack ) );
		}
	}

	stderr( `Type ${index_2( 'svelte --help' )} for help, or visit https://svelte.technology/guide` );

	if ( !recover ) process.exit( 1 );
}

function mkdirp ( dir ) {
	const parent = path.dirname( dir );
	if ( dir === parent ) return;

	mkdirp( parent );
	if ( !fs.existsSync( dir ) ) fs.mkdirSync( dir );
}

function compile$1 ( command ) {
	const input = command.input || command._[1];
	const output = command.output;

	const stats = fs.statSync( input );
	const isDir = stats.isDirectory();

	const globals = {};
	if ( command.globals ) {
		command.globals.split( ',' ).forEach( pair => {
			const [ key, value ] = pair.split( ':' );
			globals[ key ] = value;
		});
	}

	const options = {
		name: command.name,
		format: command.format,
		sourceMap: command.sourcemap,
		globals,
		css: command.css !== false,
		dev: command.dev
	};

	if ( isDir ) {
		if ( !output ) {
			handleError({
				code: 'MISSING_DIR_OUTPUT_OPTION'
			});
		}

		mkdirp( output );
		compileDirectory( input, output, options );
	} else {
		compileFile( input, output, options );
	}
}

function compileDirectory ( input, output, options ) {
	fs.readdirSync( input ).forEach( file => {
		const src = path.resolve( input, file );
		const dest = path.resolve( output, file );

		if ( path.extname( file ) === '.html' ) {
			compileFile( src, dest.substring( 0, dest.lastIndexOf( '.html' ) ) + '.js', options );
		}

		else {
			const stats = fs.statSync( src );
			if ( stats.isDirectory() ) {
				compileDirectory( src, dest, options );
			}
		}
	});
}

let SOURCEMAPPING_URL = 'sourceMa';
SOURCEMAPPING_URL += 'ppingURL';

function compileFile ( input, output, options ) {
	console.error( `compiling ${path.relative( process.cwd(), input )}...` ); // eslint-disable-line no-console

	options = Object.assign( {}, options );
	if ( !options.name ) options.name = getName( input );

	options.filename = input;
	options.outputFilename = output;

	const { sourceMap } = options;
	const inline = sourceMap === "inline";

	const source = fs.readFileSync( input, 'utf-8' );

	let compiled;

	try {
		compiled = svelte.compile( source, options );
	} catch ( err ) {
		console.error( index_1( err.message ) ); // eslint-disable-line no-console
		if ( err.frame ) {
			console.error( err.frame ); // eslint-disable-line no-console
		} else {
			console.error( err.stack ); // eslint-disable-line no-console
		}

		process.exit( 1 );
	}

	const { map } = compiled;
	let { code } = compiled;
	if ( sourceMap ) {
		code += `\n//# ${SOURCEMAPPING_URL}=${( inline || !output ) ? map.toUrl() : `${path.basename(output)}.map`}\n`;
	}

	if ( output ) {
		fs.writeFileSync( output, code );
		console.error( `wrote ${path.relative( process.cwd(), output )}` ); // eslint-disable-line no-console
		if ( sourceMap && !inline ) {
			fs.writeFileSync( `${output}.map`, map );
			console.error( `wrote ${path.relative( process.cwd(), `${output}.map` )}` ); // eslint-disable-line no-console
		}
	} else {
		process.stdout.write( code );
	}
}

function getName ( input ) {
	return path.basename( input )
		.replace( path.extname( input ), '' )
		.replace( /[^a-zA-Z_$0-9]+/g, '_' )
		.replace( /^_/, '' )
		.replace( /_$/, '' )
		.replace( /^(\d)/, '_$1' );
}

var tasks = {
	compile: compile$1
};

const command = index$1( process.argv.slice( 2 ), {
	alias: {
		// Aliases
		strict: 'useStrict',

		// Short options
		f: 'format',
		g: 'globals',
		h: 'help',
		i: 'input',
		m: 'sourcemap',
		n: 'name',
		o: 'output',
		v: 'version',
		d: 'dev'
	}
});

if ( command.help || ( process.argv.length <= 2 && process.stdin.isTTY ) ) {
	console.error( `\n${help.replace('__VERSION__', version)}\n` ); // eslint-disable-line no-console
}

else if ( command.version ) {
	console.error( `svelte-cli version ${version}\nsvelte version ${svelte.VERSION}` ); // eslint-disable-line no-console
}

else {
	console.error( `svelte version ${svelte.VERSION}` ); // eslint-disable-line no-console
	const task = tasks[ command._[0] ];

	if ( task ) {
		task( command );
	} else {
		console.error( `Unrecognised command ${command._[0]}. Type svelte --help to see instructions` ); // eslint-disable-line no-console
	}
}
